.MODEL SMALL
.STACK 64
	.DATA
WINDOW_WIDTH DW 140H
WINDOW_LENGTH DW 0C8H
HALF_WINDOW_WIDTH DW 050H
TIME_AUX DB 0
BIRD_X DW  0CH	
BIRD_Y DW  0CH
BIRD_INITIAL_X DW 0AH
BIRD_INITIAL_Y DW 64H
BIRD_SIZE DW 06H
BIRD_VELOCITY_Y DW 02H
EARLY_DETECTION DW 06H
BLOCKS_X DW 120H, 100H, 80H
BLOCKS_Y DW 0FH, 45H, 0A8H
BLOCKS_COUNT DW 5H, 1H, 2H
BLOCK_X DW 0
BLOCK_Y DW 0
BLOCK_WIDTH DW 01H
BLOCK_LENGTH DW 0CH
BLOCK_COUNT DW 1H
BLOCK_INDEX DW 0H
BLOCK_VELOCITY_X DW 02H
CEILING_X DW 00H
CEILING_Y DW 0AH
CEILING_WIDTH DW 140H

	.CODE 
MAIN	PROC FAR
    MOV AX,@DATA            ;initialize DS
	MOV DS,AX
	
	CALL CLEAR_SCREEN
	CHECK_TIME:
		MOV AH, 2CH	;get system time
		INT 21H
		CMP DL, TIME_AUX ; current time equal to previous or not?
		JE CHECK_TIME
		MOV TIME_AUX, DL ; update time
		CALL CLEAR_SCREEN ; erase the trial of pixels when moving
		CALL DRAW_CEILING
		
		CALL DRAW_BIRD
		CALL MOVE_BIRD
		CALL MOVE_ALL_BLOCKS
		CALL DRAW_ALL_BLOCKS
		
		
		JMP CHECK_TIME


MAIN ENDP

DRAW_BIRD PROC
	MOV CX, BIRD_X
	MOV DX, BIRD_Y

	DRAW_HORIZENTAL:
		MOV AH, 0CH	;writing an initial pixel
		MOV AL, 0FH	; white color
		MOV BH, 00H	;set page num
		INT 10H

		INC CX
		MOV AX, BIRD_SIZE
		ADD AX, BIRD_X	;now we add size to the initial index
		CMP CX, AX
		JNG DRAW_HORIZENTAL

	MOV CX, BIRD_X
	DRAW_VERTICAL:
		INC DX
		MOV AX, BIRD_SIZE
		ADD AX, BIRD_Y	;now we add size to the initial index
		CMP DX, AX
		JNG DRAW_HORIZENTAL
	

	RET
DRAW_BIRD ENDP

DRAW_ALL_BLOCKS PROC
	MOV AX, 0
	MOV BLOCK_INDEX, AX
	EACH_BLOCK:
		MOV SI, OFFSET BLOCKS_X
		MOV DI, OFFSET BLOCKS_Y
		MOV BX, OFFSET BLOCKS_COUNT

		ADD SI, BLOCK_INDEX
		ADD DI, BLOCK_INDEX
		ADD BX, BLOCK_INDEX

		MOV AX, [SI] 
		MOV BLOCK_X, AX
		MOV AX, [DI]
		MOV BLOCK_Y, AX
		MOV AX, [BX]
		MOV BLOCK_COUNT, AX
		
		CALL DRAW_BLOCK
		ADD BLOCK_INDEX, 2H
		CMP BLOCK_INDEX, 4H
		JLE EACH_BLOCK
	RET
DRAW_ALL_BLOCKS ENDP

DRAW_BLOCK PROC NEAR
	MOV SI, BLOCK_COUNT
	MOV AX, BLOCK_LENGTH
	MUL SI
	MOV SI, AX
	MOV CX, BLOCK_X
	MOV DX, BLOCK_Y

	DRAW_HORIZENTAL:
		MOV AH, 0CH	;writing an initial pixel
		MOV AL, 0AH	; green color
		MOV BH, 00H	;set page num
		INT 10H

		INC CX
		MOV AX, BLOCK_WIDTH
		ADD AX, BLOCK_X	;now we add size to the initial index
		CMP CX, AX
		JNG DRAW_HORIZENTAL

	MOV CX, BLOCK_X
	DRAW_VERTICAL:
		INC DX
		MOV AX, SI		; SI is currently the new block_length
		ADD AX, BLOCK_Y	;now we add size to the initial index
		CMP DX, AX
		JNG DRAW_HORIZENTAL

	RET
DRAW_BLOCK ENDP

MOVE_BIRD PROC
	MOV AX, BIRD_VELOCITY_Y	; move bird
	ADD BIRD_Y, AX

	CMP BIRD_Y, 00h
	JL NEG_Y
	
	MOV AX, WINDOW_LENGTH
	SUB AX, BIRD_SIZE
	SUB AX, EARLY_DETECTION
	SUB AX, CEILING_Y
	CMP BIRD_Y, AX
	JG RESET_BIRD
	RET
	NEG_Y:
		NEG BIRD_VELOCITY_Y
		RET
	RESET_BIRD:
		CALL RESET_BIRD_POS
		RET
	
MOVE_BIRD ENDP

MOVE_ALL_BLOCKS PROC NEAR
	MOV AX, 0
	MOV BLOCK_INDEX, AX
	EACH_BLOCK:
		MOV SI, OFFSET BLOCKS_X
		MOV DI, OFFSET BLOCKS_Y
		MOV BX, OFFSET BLOCKS_COUNT

		ADD SI, BLOCK_INDEX
		ADD DI, BLOCK_INDEX
		ADD BX, BLOCK_INDEX

		MOV AX, [SI] 
		MOV BLOCK_X, AX
		MOV AX, [DI]
		MOV BLOCK_Y, AX
		MOV AX, [BX]
		MOV BLOCK_COUNT, AX
		
		CALL MOVE_BLOCK
		ADD BLOCK_INDEX, 2H
		CMP BLOCK_INDEX, 4H
		JLE EACH_BLOCK
	RET
	
MOVE_ALL_BLOCKS ENDP
	
MOVE_BLOCK PROC NEAR
	MOV AX, BLOCK_VELOCITY_X	; move block
	SUB BLOCK_X, AX
	MOV SI, OFFSET BLOCKS_X
	ADD SI, BLOCK_INDEX
	MOV DX, BLOCK_X
	MOV [SI], DX

	MOV AX, HALF_WINDOW_WIDTH
	CMP BLOCK_X, AX
	JG CREATE_BLOCK

	RET
	
	CREATE_BLOCK:
		;CALL CREATE_NEW_BLOCK
		RET
MOVE_BLOCK ENDP

CREATE_NEW_BLOCK PROC NEAR
	MOV AH, 00h  ; interrupts to get system time        
	INT 1AH      ; CX:DX now hold number of clock ticks since midnight      

	mov  ax, dx
	xor  dx, dx
	mov  cx, 5  
	div  cx       ; here dx contains the remainder of the division - from 0 to 4
	INC DX		 ;
	RET
CREATE_NEW_BLOCK ENDP

RESET_BIRD_POS PROC NEAR
	MOV AX, BIRD_INITIAL_X
	MOV BIRD_X, AX

	MOV AX, BIRD_INITIAL_Y
	MOV BIRD_Y, AX

	RET
RESET_BIRD_POS ENDP



CLEAR_SCREEN PROC
	MOV AH, 00h	; set video mode
	MOV AL, 0Dh	; choose video mode
	INT 10h		; execute

	MOV AH, 0BH	; set background color
	MOV BH, 00H
	MOV BL, 09H	; blue color
	INT 10H
	RET
CLEAR_SCREEN ENDP

DRAW_CEILING PROC NEAR
	MOV CX, CEILING_X
	MOV DX, CEILING_Y
	DRAW_HORIZENTAL:
		MOV AH, 0CH	;writing an initial pixel
		MOV AL, 0FH	;white color
		MOV BH, 00H	;set page num
		INT 10H
		
		INC CX
		MOV AX, CEILING_WIDTH
		ADD AX, CEILING_X	;now we add size to the initial index
		CMP CX, AX
		JNG DRAW_HORIZENTAL
	
	RET
DRAW_CEILING ENDP

	  END    MAIN       